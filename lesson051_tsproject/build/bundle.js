/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/

// без webpack можно селать nmp tsc -w
// настройка webpack medium.com
// чтобы добавить modul: npm install
// Smth это тип для какого-нибудь поля User
const key = 'age';
const user = {
    age: 23,
    name: 'Jhon'
};
console.log(user[key]);
console.log(user['age']);
// ----------------------------------------------------------
// typeof
// смысл typeof на основании значения вернуть тип
// const person = {
//     name: 'Peter',
//     age:2,
//     stack: [2,1,3,4]
// }
// typeof возвращает тип
// type Person =typeof person;
// должны быть такие же поля
// const person2: Person = {
//     name: 'valerchik',
//     age:5,
//     city: 'Gomel',// выдает ошибку, потому что такого поля нет
//     stack: [2,1,3,4]
// }
// получение ключей из неизвепстногшо объекта
// const person = {
//     name: 'Peter',
//     age:2,
//     stack: [2,1,3,4]
// }
// type PersonKey = keyof typeof person;// определяем тип ключей
// const key: PersonKey = 'stack';
// console.log(person[key])
// -----------------------------------------------------------------------------------------
// сервисные типы(как будто вспомогательные функции, которые будут помогать создавать типы)
// --------------------------------------------------------------------------------------------
// const person = {
//     name: 'Peter',
//     age:2,
//     stack: [2,1,3,4]
// }
// function add (a:number,b:number){
//     return [a+b];
// }
// типа функция импортируемая и мы не знаем, что она возвращает
// type A =typeof add;//возвращает всю функцию
// type A = ReturnType<typeof add>; // возвращает тип того, что возвращет функция
// type B = Parameters<typeof add>; возвращет типы параметров
// new Promise<number>((res)=>{
//     res(2);
// }).then((val)=>{})
// type Programmer = {
//     name: string;
//     age: number;
//     stack:string[];
//     amountOfVygoranie: number;
// }
// type Person = Omit<Programmer, 'stack' | 'amountOfVygoranie'>;
// // используется для исключения определенных полей
// type Person2 = Pick<Programmer, 'stack' | 'amountOfVygoranie'>;
// // используется для выбирания конкретных полей
// type Person3 = Partial<Programmer>;
// // делает все поля опциональными
// type Person4 = Required<Programmer>;
// // делает все поля обязательными

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,